openapi: 3.0.0
info:
  title: Transactions API
  version: "1.0.0"
  description: API for managing financial transactions.
  contact:
    name: Support Team
    email: support@argentbank.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api/v1
    description: Local server

paths:
  /transactions:
    get:
      summary: Get all transactions
      description: Retrieve a list of transactions, with optional filters for pagination, account ID, date range, and category.
      operationId: getMonthlyTransactions
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of items to return in the result set.
        - in: query
          name: id
          schema:
            type: integer
          description: Filter transactions by their unique identifier.
        - in: query
          name: accountId
          schema:
            type: integer
          description: Filter transactions by the associated account ID.
        - in: query
          name: afterAt
          schema:
            type: string
            format: Y-m-d
          description: Filter transactions that occurred after this date.
        - in: query
          name: beforeAt
          schema:
            type: string
            format: Y-m-d
          description: Filter transactions that occurred before this date.
        - in: query
          name: category
          schema:
            type: string
          description: Filter transactions by their category.
      responses:
        '200':
          description: A list of transactions grouped by account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupedTransactions'
        '401':
          description: Unauthorized access.
        '403':
          description: Forbidden — access denied.
        '500':
          description: Internal Server Error — an error occurred on the server.

    post:
      summary: Create a new transaction
      description: Add a new financial transaction for a specific account.
      operationId: createTransaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
        '400':
          description: Bad request — invalid input.
        '401':
          description: Unauthorized — authentication is required.
        '403':
          description: Forbidden — access denied.
        '500':
          description: Internal Server Error — an error occurred on the server.

  /transactions/{transactionId}:
    get:
      summary: Get details of a specific transaction
      description: Retrieve the details of a single transaction by its ID.
      operationId: getTransactionDetails
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the transaction.
      responses:
        '200':
          description: Details of the specified transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
        '401':
          description: Unauthorized — authentication is required.
        '403':
          description: Forbidden — access denied.
        '404':
          description: Transaction not found.
        '500':
          description: Internal Server Error — an error occurred on the server.

    put:
      summary: Update a specific transaction's information
      description: Modify the details of an existing transaction, such as the category or notes.
      operationId: updateTransaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the transaction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
      responses:
        '200':
          description: Transaction updated successfully.
        '204':
          description: No content — transaction updated successfully.
        '400':
          description: Bad request — invalid input.
        '401':
          description: Unauthorized — authentication is required.
        '403':
          description: Forbidden — access denied.
        '404':
          description: Transaction not found.
        '500':
          description: Internal Server Error — an error occurred on the server.

components:
  schemas:
    GroupedTransactions:
      type: object
      required:
        - items
        - limit
        - query
      properties:
        offset:
          type: number
          example: 1
          description: The starting point of the result set.
        limit:
          type: number
          example: 20
          description: The number of transactions in the result set.
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetails'
          description: A list of transaction details.

    TransactionDetails:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the transaction.
        accountId:
          type: string
          description: The ID of the account associated with the transaction.
        date:
          type: string
          format: datetime
          example: '2009-11-04T19:55:41Z'
          description: The date and time the transaction occurred.
        type:
          type: string
          description: The type of transaction (e.g., debit, credit).
        amount:
          $ref: '#/components/schemas/Amount'
        category:
          type: string
          enum: [Food, Travel, House, Hobbies, Other]
          description: The category of the transaction.
        notes:
          type: string
          description: Additional notes about the transaction.

    Amount:
      type: object
      required:
        - value
        - currency
      properties:
        value:
          type: number
          description: The transaction amount.
        currency:
          type: string
          description: The currency code (ISO alpha).
          example: EUR

    TransactionCreate:
      type: object
      properties:
        accountId:
          type: string
          description: The ID of the account associated with the new transaction.
        date:
          type: string
          format: datetime
          example: '2009-11-04T19:55:41Z'
          description: The date and time of the new transaction.
        type:
          type: string
          description: The type of transaction (e.g., debit, credit).
        amount:
          $ref: '#/components/schemas/Amount'
        category:
          type: string
          enum: [Food, Travel, House, Hobbies, Other]
          description: The category of the new transaction.
        notes:
          type: string
          description: Additional notes about the transaction.

    TransactionUpdate:
      type: object
      properties:
        category:
          type: string
          enum: [Food, Travel, House, Hobbies, Other]
          description: The updated category for the transaction.
        notes:
          type: string
          description: The updated notes for the transaction.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT